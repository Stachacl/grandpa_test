{"ast":null,"code":"var _jsxFileName = \"/Users/stacha/src/grandpa-test/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navbar } from \"./components/Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  //UseState is using inteface ICheckList and it is an array []\n\n  const [checkList, setCheckList] = useState([]);\n\n  //Storing users custom items in the local storage\n\n  //1) Getting items from local storage:\n  useEffect(() => {\n    //in case local storage is null - adding  empty array []\n    const saved = JSON.parse(localStorage.getItem(\"checkList\") || \"[]\");\n    setCheckList(saved);\n  }, []);\n  //2) Saving items to local storage:\n  useEffect(() => {\n    if (checkList.length !== 0) {\n      //this line is new\n      localStorage.setItem(\"checkList\", JSON.stringify(checkList));\n    }\n  }, [checkList]);\n  const addHandler = title => {\n    const newChecklistItem = {\n      title: title,\n      id: Date.now(),\n      completed: false\n    };\n    // This line will not guarantee that the app is working with the current state:\n    // setCheckList([newChecklistItem, ...checkList])\n\n    setCheckList(prev => [newChecklistItem, ...prev]);\n  };\n  const ckeckBoxHandler = id => {\n    setCheckList(prev => prev.map(checkListItem => {\n      if (checkListItem.id === id) {\n        checkListItem.completed = !checkListItem.completed;\n      }\n      return checkListItem;\n    }));\n  };\n  const binHandler = id => {\n    setCheckList(prev => prev.filter(checkListItem => checkListItem.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"i8EraMdQbEmHk9Fu5raRkh6uvyM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","App","checkList","setCheckList","saved","JSON","parse","localStorage","getItem","length","setItem","stringify","addHandler","title","newChecklistItem","id","Date","now","completed","prev","ckeckBoxHandler","map","checkListItem","binHandler","filter"],"sources":["/Users/stacha/src/grandpa-test/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport CheckListComponent from \"./components/CheckList\";\nimport CheckListForm from \"./components/CheckListForm\";\nimport { Navbar } from \"./components/Navbar\";\nimport { ICheckList } from \"./interfaces\";\n\nconst App: React.FunctionComponent = () => {\n  //UseState is using inteface ICheckList and it is an array []\n\n  const [checkList, setCheckList] = useState<ICheckList[]>([]);\n\n  //Storing users custom items in the local storage\n\n  //1) Getting items from local storage:\n  useEffect(() => {\n    //in case local storage is null - adding  empty array []\n    const saved = JSON.parse(\n      localStorage.getItem(\"checkList\") || \"[]\"\n    ) as ICheckList[];\n    setCheckList(saved);\n  }, [])\n  //2) Saving items to local storage:\n  useEffect(() => {\n    if(checkList.length !== 0){        //this line is new\n    localStorage.setItem(\"checkList\", JSON.stringify(checkList));\n  }}, [checkList]);\n\n  const addHandler = (title: string) => {\n    const newChecklistItem: ICheckList = {\n      title: title,\n      id: Date.now(),\n      completed: false,\n    };\n    // This line will not guarantee that the app is working with the current state:\n    // setCheckList([newChecklistItem, ...checkList])\n\n    setCheckList((prev) => [newChecklistItem, ...prev]);\n  };\n\n  const ckeckBoxHandler = (id: number) => {\n    setCheckList((prev) =>\n      prev.map((checkListItem) => {\n        if (checkListItem.id === id) {\n          checkListItem.completed = !checkListItem.completed\n        }\n        return checkListItem;\n      })\n    );\n  };\n  const binHandler = (id: number) => {\n    setCheckList((prev) =>\n      prev.filter((checkListItem) => checkListItem.id !== id)\n    );\n  };\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"container\">\n        \n      </div>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAGlD,SAASC,MAAM,QAAQ,qBAAqB;AAAC;AAAA;AAG7C,MAAMC,GAA4B,GAAG,MAAM;EAAA;EACzC;;EAEA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAe,EAAE,CAAC;;EAE5D;;EAEA;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMM,KAAK,GAAGC,IAAI,CAACC,KAAK,CACtBC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI,IAAI,CAC1B;IACjBL,YAAY,CAACC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EACN;EACAN,SAAS,CAAC,MAAM;IACd,IAAGI,SAAS,CAACO,MAAM,KAAK,CAAC,EAAC;MAAS;MACnCF,YAAY,CAACG,OAAO,CAAC,WAAW,EAAEL,IAAI,CAACM,SAAS,CAACT,SAAS,CAAC,CAAC;IAC9D;EAAC,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEhB,MAAMU,UAAU,GAAIC,KAAa,IAAK;IACpC,MAAMC,gBAA4B,GAAG;MACnCD,KAAK,EAAEA,KAAK;MACZE,EAAE,EAAEC,IAAI,CAACC,GAAG,EAAE;MACdC,SAAS,EAAE;IACb,CAAC;IACD;IACA;;IAEAf,YAAY,CAAEgB,IAAI,IAAK,CAACL,gBAAgB,EAAE,GAAGK,IAAI,CAAC,CAAC;EACrD,CAAC;EAED,MAAMC,eAAe,GAAIL,EAAU,IAAK;IACtCZ,YAAY,CAAEgB,IAAI,IAChBA,IAAI,CAACE,GAAG,CAAEC,aAAa,IAAK;MAC1B,IAAIA,aAAa,CAACP,EAAE,KAAKA,EAAE,EAAE;QAC3BO,aAAa,CAACJ,SAAS,GAAG,CAACI,aAAa,CAACJ,SAAS;MACpD;MACA,OAAOI,aAAa;IACtB,CAAC,CAAC,CACH;EACH,CAAC;EACD,MAAMC,UAAU,GAAIR,EAAU,IAAK;IACjCZ,YAAY,CAAEgB,IAAI,IAChBA,IAAI,CAACK,MAAM,CAAEF,aAAa,IAAKA,aAAa,CAACP,EAAE,KAAKA,EAAE,CAAC,CACxD;EACH,CAAC;EAED,oBACE;IAAA,wBACE,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eACV;MAAK,SAAS,EAAC;IAAW;MAAA;MAAA;MAAA;IAAA,QAEpB;EAAA,gBACL;AAEP,CAAC;AAAC,GAzDId,GAA4B;AAAA,KAA5BA,GAA4B;AA2DlC,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}